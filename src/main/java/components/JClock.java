/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package components;

import event.TimeModelEvent;
import event.TimeModelListener;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.geom.AffineTransform;

/**
 *
 * @author brk4443a
 */
public class JClock extends javax.swing.JPanel implements TimeModelListener {
    
    int hour;
    int minute;
    int second;
    /**
     * Creates new form JClock
     */
    public JClock() {
        initComponents();
        int height = this.getHeight();
        int width = this.getWidth();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D)g;
        
        g.setColor(Color.LIGHT_GRAY); 
        g.fillOval(0, 0, this.getHeight(), this.getWidth());
        
        g.setColor(Color.BLACK);
        Point point = new Point(this.getWidth() / 2, (int)(this.getHeight() * 0.05));
        Point center = new Point(this.getHeight() / 2, this.getWidth() / 2);
        for (int i = 0; i < 12; i++) {
            g.fillOval(point.x, point.y, 4, 4);
            point = rotatePoint(point, center, getHourRotation(1));
        }
        
        g.setColor(Color.RED);
        Point pointSeconds = new Point(this.getWidth() / 2, (int)(this.getHeight() * 0.05));
        pointSeconds = rotatePoint(pointSeconds, center, getSecondsRotation(second));
        g.drawLine((int)center.getX(), (int)center.getY(), (int)pointSeconds.getX(), (int)pointSeconds.getY());
        
        g.setColor(Color.BLACK);
        Point pointMinutes = new Point(this.getWidth() / 2, (int)(this.getHeight() * 0.05));
        pointMinutes = rotatePoint(pointMinutes, center, getMinuteRotation(minute));
        g2d.setStroke(new BasicStroke(2));
        g2d.drawLine((int)center.getX(), (int)center.getY(), (int)pointMinutes.getX(), (int)pointMinutes.getY());
    
        Point pointHour = new Point(this.getWidth() / 2, (int)(this.getHeight() * 0.20));
        pointHour = rotatePoint(pointHour, center, getHourRotation(hour));
        g2d.setStroke(new BasicStroke(3));
        g2d.drawLine((int)center.getX(), (int)center.getY(), (int)pointHour.getX(), (int)pointHour.getY());
    }
    
    //retourne le degré de rotation d'une seconde sur l'horloge
    private int getSecondsRotation(int seconds) {
        return (360/60) * seconds;
    }
    //retourne le degré de rotation d'une minute sur l'horloge
    private int getMinuteRotation(int minutes) {
        return (360/60) * minutes;
    }
    //retourne le degré de rotation d'une heure sur l'horloge
    private int getHourRotation(int hours) {
        return (360/12) * hours;
    }
    // retourne un Point point qui a été tourné autour du Point center du nombre de degrés degree
    private Point rotatePoint(Point point, Point center, int degree) {
        AffineTransform rotation = new AffineTransform();
        double angleInRadians = (degree * Math.PI / 180);
        rotation.rotate(angleInRadians, center.getX(), center.getY());
        Point result = new Point();
        rotation.transform(point, result);
        return result;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void timeChanged(TimeModelEvent event) {
        hour = event.getTime().getHour();
        minute = event.getTime().getMinute();
        second = event.getTime().getSecond();
        
        repaint();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
